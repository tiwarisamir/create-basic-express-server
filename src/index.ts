#!/usr/bin/env node

import fs from "fs";
import path from "path";
import inquirer from "inquirer";
import latestVersion from "latest-version";

// function to fetch the latest version
async function fetchLatestVersion(
  packageName: string,
  defaultVersion: string
): Promise<string> {
  try {
    const version = await latestVersion(packageName);
    console.log(`Latest ${packageName} version: ${version}`);
    return version;
  } catch (error) {
    console.log(
      `Failed to fetch latest ${packageName} version, using default ^${defaultVersion}`
    );
    return defaultVersion;
  }
}

async function initProject() {
  const answers = await inquirer.prompt([
    {
      type: "input",
      name: "projectName",
      message: "Enter your project name:",
      validate: (input: string) => {
        if (!input) return "Project name cannot be empty";
        return /^[a-z0-9\-]+$/.test(input)
          ? true
          : "Use only lowercase letters, numbers, and hyphens";
      },
    },
    {
      type: "list",
      name: "language",
      message: "Choose server language:",
      choices: ["JavaScript", "TypeScript"],
    },
  ]);

  const { projectName, language } = answers;
  const projectDir = path.join(process.cwd(), projectName);

  // project main folder
  if (!fs.existsSync(projectDir)) {
    fs.mkdirSync(projectDir);
    console.log(`Created project folder: ${projectName}`);
  } else {
    console.log(
      `Folder ${projectName} already exists. Files may be overwritten.`
    );
  }

  // Fetch versions
  const [
    expressVersion,
    dotenvVersion,
    nodemonVersion,
    nodeTypesVersion,
    typeScriptVersion,
    expressTypeVersion,
  ] = await Promise.all([
    fetchLatestVersion("express", "4.18.2"),
    fetchLatestVersion("dotenv", "16.4.7"),
    fetchLatestVersion("nodemon", "3.1.9"),
    fetchLatestVersion("@types/node", "22.13.4"),
    fetchLatestVersion("typescript", "5.7.3"),
    fetchLatestVersion("@types/express", "5.0.0"),
  ]);

  //  package.json
  const packageJsonContent: any = {
    name: projectName,
    version: "1.0.0",
    description: "A basic Express server generated by basic-express-server",
    main: "server.js",
    type: "module",
    scripts:
      language === "TypeScript"
        ? {
            start: "node dist/server.js",
            build: "tsc",
            watch: "tsc -w",
            dev: "nodemon dist/server.js",
          }
        : { start: "node src/server.js", dev: "nodemon src/server.js" },
    author: "",
    license: "ISC",
    dependencies: {
      express: `^${expressVersion}`,
      dotenv: `^${dotenvVersion}`,
    },
    devDependencies: {
      nodemon: `^${nodemonVersion}`,
    },
  };

  if (language === "TypeScript") {
    packageJsonContent.devDependencies["@types/node"] = `^${nodeTypesVersion}`;
    packageJsonContent.devDependencies["typescript"] = `^${typeScriptVersion}`;
    packageJsonContent.devDependencies[
      "@types/express"
    ] = `^${expressTypeVersion}`;
  }

  const packageJsonPath = path.join(projectDir, "package.json");
  if (!fs.existsSync(packageJsonPath)) {
    fs.writeFileSync(
      packageJsonPath,
      JSON.stringify(packageJsonContent, null, 2)
    );
    console.log("Created package.json");
  } else {
    console.log("package.json already exists, skipping creation");
  }

  // .gitignore
  const gitignoreContent = `node_modules
.env
dist
`;
  const gitignorePath = path.join(projectDir, ".gitignore");
  if (!fs.existsSync(gitignorePath)) {
    fs.writeFileSync(gitignorePath, gitignoreContent);
    console.log("Created .gitignore");
  } else {
    console.log(".gitignore already exists, skipping creation");
  }

  //  .env file
  const envContent = `PORT=3000`;
  const envPath = path.join(projectDir, ".env");
  if (!fs.existsSync(envPath)) {
    fs.writeFileSync(envPath, envContent);
    console.log("Created .env");
  } else {
    console.log(".env already exists, skipping creation");
  }

  // tsconfig.json
  if (language === "TypeScript") {
    const tsconfigContent = {
      compilerOptions: {
        target: "ES2020",
        module: "NodeNext",
        moduleResolution: "NodeNext",
        rootDir: "src",
        outDir: "dist",
        esModuleInterop: true,
        forceConsistentCasingInFileNames: true,
        strict: true,
        skipLibCheck: true,
      },
    };
    const tsconfigPath = path.join(projectDir, "tsconfig.json");
    if (!fs.existsSync(tsconfigPath)) {
      fs.writeFileSync(tsconfigPath, JSON.stringify(tsconfigContent, null, 2));
      console.log("Created tsconfig.json");
    } else {
      console.log("tsconfig.json already exists, skipping creation");
    }
  }

  //  src folder and subfolders
  const srcPath = path.join(projectDir, "src");
  if (!fs.existsSync(srcPath)) {
    fs.mkdirSync(srcPath);
    console.log("Created src folder");
  } else {
    console.log("src folder already exists, skipping creation");
  }

  const subfolders =
    language === "TypeScript"
      ? ["controllers", "middlewares", "models", "types", "utils"]
      : ["controllers", "middlewares", "models", "utils"];

  subfolders.forEach((folder) => {
    const folderPath = path.join(srcPath, folder);
    if (!fs.existsSync(folderPath)) {
      fs.mkdirSync(folderPath);
      console.log(`Created src/${folder} folder`);
    } else {
      console.log(`src/${folder} folder already exists, skipping creation`);
    }
  });

  // main server file
  const serverFileName = language === "TypeScript" ? "server.ts" : "server.js";
  const serverFilePath = path.join(srcPath, serverFileName);
  let serverCode = "";

  if (language === "TypeScript") {
    serverCode = `import express, { Request, Response } from 'express';
  import { config } from "dotenv";

  config({
    path: "./.env",
  });

  const app = express();
  const PORT = process.env.PORT || 3000;

  app.use(express.json());

  app.get('/', (req: Request, res: Response) => {
    res.send('Welcome to the backend! Where we make the internet tick!');
  });

  app.listen(PORT, () => {
    console.log(\`Server is running on port \${PORT}\`);
  });
  `;
  } else {
    serverCode = `import express from "express";
  import { config } from "dotenv";

  config({
    path: "./.env",
  });

  const app = express();
  const PORT = process.env.PORT || 3000;

  app.use(express.json());

  app.get('/', (req, res) => {
    res.send('Welcome to the backend! Where we make the internet tick!');
  });

  app.listen(PORT, () => {
    console.log(\`Server is running on port \${PORT}\`);
  });
  `;
  }

  if (!fs.existsSync(serverFilePath)) {
    fs.writeFileSync(serverFilePath, serverCode);
    console.log(`Created src/${serverFileName} with basic server code.`);
  } else {
    console.log(`src/${serverFileName} already exists, skipping creation`);
  }
}

initProject().catch((error) => {
  console.error("Error initializing project:", error);
});
